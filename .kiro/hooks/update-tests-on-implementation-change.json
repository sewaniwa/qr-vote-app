{
  "name": "実装ファイル変更時のテスト更新",
  "description": "実装ファイルが保存されたときに対応するテストファイルを自動更新",
  "trigger": {
    "type": "fileSaved",
    "filePattern": "src/**/*.{ts,tsx,js,jsx}",
    "excludePattern": "**/*.{test,spec}.*"
  },
  "action": {
    "type": "agentExecution",
    "instructions": "実装ファイルが保存されました。以下の手順でテストを更新してください：\n\n1. 変更内容を分析\n   - 新しく追加された関数やメソッド\n   - 変更された関数のシグネチャ\n   - 新しく追加されたクラスやコンポーネント\n   - 削除された機能\n\n2. 対応するテストファイルを確認\n   - 同じディレクトリまたは__tests__フォルダ内の対応するテストファイル\n   - 存在しない場合は新規作成（ファイル名.test.ts(x)）\n\n3. テストケースを生成または更新\n   - 正常系のテスト（ハッピーパス）\n   - 異常系のテスト（エラーハンドリング）\n   - エッジケース（境界値テスト）\n   - モックが必要な場合は適切に設定\n   - 既存のテストが変更により影響を受ける場合は更新\n\n4. テストの品質確認\n   - 新しいコードがテストされているか\n   - テストが意味のあるアサーションを含んでいるか\n   - 目標カバレッジ（80%）を維持できているか\n\n5. テストを実行して検証\n   - 生成・更新したテストが通ることを確認\n   - 失敗した場合は原因を分析し修正案を提示\n   - 他の既存テストに影響がないか確認\n\n変更されたファイル: {{filePath}}\n変更内容を確認し、適切なテストの更新を行ってください。"
  }
}